# Tox is a generic virtualenv management and test command line tool. Its goal is to
# standardize testing in Python. We will be using it extensively in this course.

# Using Tox we can (on multiple operating systems):
# + Eliminate PYTHONPATH challenges when running scripts/tests
# + Eliminate virtualenv setup confusion
# + Streamline steps such as model training, model publishing

# global configuration for tox 
[tox]
min_version = 3
envlist = test_package, checks ,py36-train
skipsdist = True


# global settings for all environments 
[testenv]
basepython = python
install_command = pip install {opts} {packages}
allowlist_externals = train

setenv =
	PYTHONPATH=.
	# sos for reproducibibility 
	PYTHONHASHSEED=0



# set up test environment 
[testenv:test_package]
envdir = {toxworkdir}/test_package

deps =
	-r{toxinidir}/requirements/test_requirements.txt
commands=
	python classification_model/train_pipeline.py
	pytest \
	-s \
	-vv \
	{posargs:tests/}


# set up train environment 
[testenv:py36-train]
envdir = {toxworkdir}/test_package
deps =
     {[testenv:test_package]deps}
commands=
	python classification_model/train_pipeline.py


# set up checks environment 
[testenv:checks]
envdir = {toxworkdir}/checks
deps =
	-r{toxinidir}/requirements/typing_requirements.txt
commands =
	flake8 classification_model tests
	{posargs:mypy regression_model}

[flake8]
exclude = .git,env
max-line-length = 100